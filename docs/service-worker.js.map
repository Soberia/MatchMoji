{"version":3,"sources":["service-worker.ts"],"names":["CACHE_NAME","process","self","addEventListener","event","urls","file","__WB_MANIFEST","url","endsWith","includes","push","waitUntil","caches","open","then","cache","addAll","keys","Promise","all","map","key","startsWith","delete","respondWith","match","request","response","fetch"],"mappings":"mBAaA,MAAM,EAAU,UAAM,qBAAN,aAAqC,QAArC,WAGhB,KAAK,iBAAiB,WAAW,IAM/B,MAAM,EAAO,CACX,IACA,uBACA,cACA,eACA,eACA,kBAQF,IAAK,MAAM,KAAQ,2pDAAK,eAEpB,EAAK,IAAI,SAAS,QAClB,EAAK,IAAI,SAAS,SAClB,EAAK,IAAI,SAAS,SAIjB,EAAK,IAAI,SAAS,WAAa,EAAK,IAAI,SAAS,UAElD,EAAK,KAAK,EAAK,KAGnB,EAAM,UAAU,OAAO,KAAK,GAAY,MAAK,GAAS,EAAM,OAAO,KAAnE,IAIF,KAAK,iBAAiB,YAAY,IAEhC,EAAM,UACJ,OAAO,OAAO,MAAK,GACjB,QAAQ,IACN,EAAK,KACH,GACE,EAAI,WAAW,uBACf,IAAQ,GACR,OAAO,OAAO,QAPxB,IAeF,KAAK,iBAAiB,SAAS,IAE7B,EAAM,YACJ,OACG,MAAM,EAAM,SACZ,MAAK,GAAY,GAAY,MAAM,EAAM,WAH9C","file":"service-worker.js","sourceRoot":"","sourcesContent":["export type {};\n\ndeclare const self: ServiceWorkerGlobalScope;\ndeclare global {\n  interface ServiceWorkerGlobalScope {\n    __WB_MANIFEST: {\n      url: string;\n      integrity?: string;\n      revision?: string | null;\n    }[];\n  }\n}\n\nconst CACHE_NAME = `${process.env.REACT_APP_NAME}-v${process.env.REACT_APP_VERSION}-assets`;\n\n// Installing the service worker\nself.addEventListener('install', event => {\n  // Static files' path should be relative to the service worker's scope.\n  // Because this file will be compiled ahead of time and the path\n  // of which `App` component will be served on is unknown.\n  // All assets path in `manifest.webmanifest` file also\n  // should be treated the same.\n  const urls = [\n    '.',\n    'manifest.webmanifest',\n    'favicon.svg',\n    'icon192.webp',\n    'icon512.webp',\n    'changelog.json'\n  ];\n\n  /**\n   * Selecting required assets.\n   * Due to bug in `CRA`, SVG files also will be included in `self.__WB_MANIFEST`.\n   * @see https://github.com/facebook/create-react-app/issues/9167\n   */\n  for (const file of self.__WB_MANIFEST)\n    if (\n      file.url.endsWith('.js') ||\n      file.url.endsWith('.css') ||\n      file.url.endsWith('.m4a') ||\n      // Size of the other font formats is too big to be included\n      // without tweaking the `workbox-webpack-plugin`'s\n      // `maximumFileSizeToCacheInBytes` value.\n      (file.url.endsWith('.woff2') && file.url.includes('colr'))\n    )\n      urls.push(file.url);\n\n  // `ExtendableEvent.waitUntil()` has to be called synchronously\n  event.waitUntil(caches.open(CACHE_NAME).then(cache => cache.addAll(urls)));\n});\n\n// Activating the service worker\nself.addEventListener('activate', event => {\n  // `ExtendableEvent.waitUntil()` has to be called synchronously\n  event.waitUntil(\n    caches.keys().then(keys =>\n      Promise.all(\n        keys.map(\n          key =>\n            key.startsWith(process.env.REACT_APP_NAME!) && // Only this web application caches\n            key !== CACHE_NAME && // Only older versions\n            caches.delete(key)\n        )\n      )\n    )\n  );\n});\n\n// Serving assets from cache\nself.addEventListener('fetch', event => {\n  // `FetchEvent.respondWith()` has to be called synchronously\n  event.respondWith(\n    caches\n      .match(event.request)\n      .then(response => response || fetch(event.request))\n  );\n});\n"]}